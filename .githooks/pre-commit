#!/usr/bin/env bash
set -euo pipefail

mapfile -t FILES < <(git diff --cached --name-only --diff-filter=ACMRTUXB)

if [ "${#FILES[@]}" -eq 0 ]; then
  exit 0
fi

doc_only=true
for file in "${FILES[@]}"; do
  if [[ "$file" =~ ^docs/ ]] || [[ "$file" =~ \.(md|MD|txt|adoc|rst)$ ]] || [[ "$file" == README.md ]] || [[ "$file" == CONTRIBUTING.md ]] || [[ "$file" == SECURITY.md ]] || [[ "$file" == LICENSE ]]; then
    continue
  else
    doc_only=false
    break
  fi
done

if [ "$doc_only" = true ]; then
  echo "[hooks] Docs-only change detected; skipping pre-commit checks."
  exit 0
fi

# Repo guards on staged files (policy: no suppression comments, max lines, etc.)
if command -v python3 >/dev/null 2>&1; then
  echo "[hooks] Running repo guards"
  python3 ops/ci/guards.py || { echo "[hooks] Repo guards failed"; exit 1; }
else
  echo "[hooks] Warning: python3 not found; skipping repo guards"
fi

worklog_staged=false
for file in "${FILES[@]}"; do
  if [[ "$file" == docs/worklog.md ]]; then
    worklog_staged=true
    break
  fi
done

if [ "$worklog_staged" = false ]; then
  echo "[hooks] docs/worklog.md must be updated for non-documentation changes."
  exit 1
fi

python_targets=()
for file in "${FILES[@]}"; do
  if [[ "$file" == *.py ]]; then
    python_targets+=("$file")
  fi
done

web_targets=()
for file in "${FILES[@]}"; do
  if [[ "$file" == apps/web/* ]] && [[ "$file" =~ \.(ts|tsx|js|jsx)$ ]]; then
    web_targets+=("${file#apps/web/}")
  fi
done

if [ ${#python_targets[@]} -gt 0 ]; then
  RUFF_BIN=""
  if [ -n "${VIRTUAL_ENV:-}" ] && [ -x "$VIRTUAL_ENV/bin/ruff" ]; then
    RUFF_BIN="$VIRTUAL_ENV/bin/ruff"
  elif [ -x ".venv/bin/ruff" ]; then
    RUFF_BIN=".venv/bin/ruff"
  elif command -v ruff >/dev/null 2>&1; then
    RUFF_BIN="ruff"
  fi
  if [ -n "$RUFF_BIN" ]; then
    echo "[hooks] Running ruff on changed Python files ($RUFF_BIN)"
    "$RUFF_BIN" check --force-exclude "${python_targets[@]}"
  else
    echo "[hooks] Warning: ruff not found; skipping Python lint"
  fi
fi

# 웹 변경 파일 수집(스테이징) — e2e 포함, 타입 인식 린트 적용 (#29)
if command -v pnpm >/dev/null 2>&1; then
  if [ ${#web_targets[@]} -gt 0 ]; then
    echo "[hooks] web: lint staged files (e2e 포함, 타입 인식) — see #29"
    # apps/web 기준 상대경로 배열을 null-delimited로 안전 전달
    # next.config.js 등 JS 파일도 포함되므로 타입정보 의존 룰로 인한 false positive를 피하기 위해
    # 스테이징된 파일만 대상으로 실행하되, --no-warn-ignored로 무시 경고를 억제
    printf '%s\0' "${web_targets[@]}" | xargs -0 -r pnpm -C apps/web exec eslint --no-warn-ignored --max-warnings=0 --
  fi
else
  echo "[hooks] Warning: pnpm not found; skipping web lint/type-check"
fi

exit 0
