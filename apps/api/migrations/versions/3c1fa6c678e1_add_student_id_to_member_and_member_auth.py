"""add_student_id_to_member_and_member_auth

Revision ID: 3c1fa6c678e1
Revises: d1f6730b2503
Create Date: 2025-10-23 19:58:11.760438

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3c1fa6c678e1'
down_revision = 'd1f6730b2503'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """학생증 번호(student_id) 도입 마이그레이션.

    - Postgres: 기존 스크립트 흐름 그대로 수행
    - SQLite: 함수/DDL 차이를 고려해 방언별 분기 처리 및 batch_alter_table 사용
    """
    bind = op.get_bind()
    dialect = bind.dialect.name

    # 1) 컬럼 추가 (두 DB 모두 지원)
    op.add_column('member_auth', sa.Column('student_id', sa.String(length=20), nullable=True))
    op.add_column('members', sa.Column('student_id', sa.String(length=20), nullable=True))

    # 2) 기존 데이터의 임시 student_id 채우기 (이메일 로컬파트 사용)
    if dialect == 'postgresql':
        # PostgreSQL: substring/position 구문
        op.execute(
            "UPDATE member_auth SET student_id = 'temp_' || substring(email, 1, position('@' in email) - 1) "
            "WHERE student_id IS NULL"
        )
        op.execute(
            "UPDATE members SET student_id = 'temp_' || substring(email, 1, position('@' in email) - 1) "
            "WHERE student_id IS NULL"
        )
    else:
        # SQLite: substr + instr 사용 (position/substr 구문 미지원)
        op.execute(
            sa.text(
                "UPDATE member_auth "
                "SET student_id = 'temp_' || substr(email, 1, instr(email, '@') - 1) "
                "WHERE student_id IS NULL"
            )
        )
        op.execute(
            sa.text(
                "UPDATE members "
                "SET student_id = 'temp_' || substr(email, 1, instr(email, '@') - 1) "
                "WHERE student_id IS NULL"
            )
        )

    # 3) 제약조건/인덱스/열 변경
    if dialect == 'postgresql':
        # 이제 제약조건 적용 (NOT NULL)
        op.alter_column('member_auth', 'student_id', nullable=False)
        op.alter_column('members', 'student_id', nullable=False)

        # 인덱스 변경
        op.drop_index(op.f('ix_member_auth_email'), table_name='member_auth')
        op.create_index(op.f('ix_member_auth_student_id'), 'member_auth', ['student_id'], unique=True)
        op.create_index(op.f('ix_members_student_id'), 'members', ['student_id'], unique=True)

        # email 컬럼 삭제 (member_auth에서만)
        op.drop_column('member_auth', 'email')

        # members.email을 nullable로 변경
        op.alter_column('members', 'email', existing_type=sa.VARCHAR(length=255), nullable=True)
    else:
        # SQLite는 ALTER 제약/열 삭제가 제한적 → batch_alter_table 사용
        # 인덱스는 DROP/CREATE 가능
        op.drop_index('ix_member_auth_email', table_name='member_auth')

        # member_auth: NOT NULL 적용 + email 컬럼 제거 + student_id 유니크 인덱스 생성
        with op.batch_alter_table('member_auth') as batch_op:
            batch_op.alter_column(
                'student_id', existing_type=sa.String(length=20), nullable=False
            )
            batch_op.drop_column('email')
        op.create_index('ix_member_auth_student_id', 'member_auth', ['student_id'], unique=True)

        # members: NOT NULL 적용 + email nullable 변경 + 인덱스 생성
        with op.batch_alter_table('members') as batch_op:
            batch_op.alter_column(
                'student_id', existing_type=sa.String(length=20), nullable=False
            )
            batch_op.alter_column(
                'email', existing_type=sa.VARCHAR(length=255), nullable=True
            )
        op.create_index('ix_members_student_id', 'members', ['student_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_members_student_id'), table_name='members')
    op.alter_column('members', 'email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.drop_column('members', 'student_id')
    op.add_column('member_auth', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_member_auth_student_id'), table_name='member_auth')
    op.create_index(op.f('ix_member_auth_email'), 'member_auth', ['email'], unique=True)
    op.drop_column('member_auth', 'student_id')
    # ### end Alembic commands ###
